---
- hosts: controllers
  become: yes
  tasks:
  - name: Download Binaries
    vars:
      k8_version: v1.18.6
    get_url:
      url: "https://storage.googleapis.com/kubernetes-release/release/{{ k8_version }}/bin/linux/amd64/{{ item }}"
      dest: /usr/local/bin
      mode: "0755"
    loop:
      - "kube-apiserver"
      - "kube-controller-manager"
      - "kube-scheduler"
      - "kubectl"

  - name: Create Directories
    file:
      path: /etc/kubernetes/config
      state: directory
      mode: '0755'
      
  - name: Move SSL files
    copy:
      src:  "~/{{ item }}"
      dest: /var/lib/kubernetes/
      remote_src: yes
    loop:
      - "ca.pem"
      - "ca-key.pem"
      - "kubernetes-key.pem"
      - "kubernetes.pem"
      - "service-account-key.pem"
      - "service-account.pem"
      - "encryption-config.yaml"
      - "kube-controller-manager.kubeconfig"
      - "kube-scheduler.kubeconfig"

  - name: Create kube-apiserver.service
    copy:
      dest: /etc/systemd/system/kube-apiserver.service
      mode: '0755'
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-apiserver \
          --advertise-address={{ hostvars[ansible_hostname].private_ip }} \
          --allow-privileged=true \
          --apiserver-count=3 \
          --audit-log-maxage=30 \
          --audit-log-maxbackup=3 \
          --audit-log-maxsize=100 \
          --audit-log-path=/var/log/audit.log \
          --authorization-mode=Node,RBAC \
          --bind-address=0.0.0.0 \
          --client-ca-file=/var/lib/kubernetes/ca.pem \
          --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
          --etcd-cafile=/var/lib/kubernetes/ca.pem \
          --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \
          --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \
          --etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379,https://10.240.0.12:2379 \
          --event-ttl=1h \
          --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \
          --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
          --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
          --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
          --kubelet-https=true \
          --runtime-config='api/all=true' \
          --service-account-key-file=/var/lib/kubernetes/service-account.pem \
          --service-cluster-ip-range=10.32.0.0/24 \
          --service-node-port-range=30000-32767 \
          --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
          --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

  - name: Create kube-controller-manager.service
    copy:
      dest: /etc/systemd/system/kube-controller-manager.service
      mode: '0755'
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-controller-manager \
          --bind-address=0.0.0.0 \
          --cluster-cidr=10.200.0.0/16 \
          --cluster-name=kubernetes \
          --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \
          --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \
          --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \
          --leader-elect=true \
          --root-ca-file=/var/lib/kubernetes/ca.pem \
          --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \
          --service-cluster-ip-range=10.32.0.0/24 \
          --use-service-account-credentials=true \
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target

  - name: Create kube-scheduler.yaml
    copy:
      dest: /etc/kubernetes/config/kube-scheduler.yaml
      mode: '0755'
      content: |
        apiVersion: kubescheduler.config.k8s.io/v1alpha1
        kind: KubeSchedulerConfiguration
        clientConnection:
          kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
        leaderElection:
          leaderElect: true

  - name: Create kube-scheduler.service
    copy:
      dest: /etc/systemd/system/kube-scheduler.service
      mode: '0755'
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-scheduler \
          --config=/etc/kubernetes/config/kube-scheduler.yaml \
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
  
  - name: Start Services
    systemd:
      name: "{{ item }}"
      state: started
      enabled: yes
      daemon_reload: yes
    loop:
      - kube-apiserver 
      - kube-controller-manager 
      - kube-scheduler
  
- hosts: controller-0
  become: yes
  tasks:
  - name: Create Cluster Role for Kubelet
    shell: |
      cat << EOF | kubectl apply --kubeconfig /root/admin.kubeconfig -f -
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:kube-apiserver-to-kubelet
      rules:
        - apiGroups:
            - ""
          resources:
            - nodes/proxy
            - nodes/stats
            - nodes/log
            - nodes/spec
            - nodes/metrics
          verbs:
              - "*"
      EOF

  - name: Create Cluster Role Binding for Kubelet
    shell: |
      cat <<EOF | kubectl apply --kubeconfig /root/admin.kubeconfig -f -
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: system:kube-apiserver
        namespace: ""
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:kube-apiserver-to-kubelet
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: kubernetes
      EOF